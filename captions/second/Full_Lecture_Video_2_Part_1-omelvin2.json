[{"text":"if I've got two processes how could I make the two process start to do different things?","width":513.1818182468414},{"text":"right now they've done the same thing, I want them to do different things","width":216.18181824684143},{"text":"here's how, we'll check the return value of fork because that is one asymmetry that we have to play with","width":530.1818182468414},{"text":"if child is greater than zero, so if the result is greater than zero for my fork","width":636.1818182468414},{"text":"guess what? it means I have a child!","width":460.18181824684143},{"text":"therefore I must be the parent","width":666.1818182468414},{"text":"so now our parent could just exit","width":792.1818182468414},{"text":"what's going to happen now? this time only one process gets to print out their random number, the child process","width":993.1818182468414},{"text":"we could make this more complicated and we could have our child calling another fork, for example. have many many many more children if we wished","width":720.1818182468414},{"text":"the main point to get here is the idea that you are duplicating the world at this point. you are duplicating the process by calling fork and you have two to play with","width":740.1818182468414},{"text":"let's put that aside for a moment and talk about that very first program. the very first program we've got here does quite a bit","width":570.1818182468414},{"text":"this is an example of quite a bit of system call programming. now we're actually calling system when we're making lots of different calls","width":749.1818182468414},{"text":"my question to you is can you explain every single line of this program?","width":534.1818182468414},{"text":"if you can, if you've been reading ahead in some of the manuals now's your chance to explain it to your neighbor. if you're not sure about something ask your neighbor. see if they know more system programming than you","width":819.1818182468414},{"text":"what is this program doing? ","width":221.18181824684143},{"text":"what does every line do?","width":275.18181824684143},{"text":"you want a handout? sure.","width":650.1818182468414},{"text":"this is the (cut's off)","width":329.18181824684143},{"text":"(speaking to a student) oh ok, what was the question?","width":816.1818182468414},{"text":"(still speaking directly to a student) we killed the parent process, but now the child process carries on","width":621.1818182468414},{"text":"yes, that is how we write the code. we say if I'm the parent just exit so the child carries on. yeah, sure","width":1991.1818182468414},{"text":"anybody else missing a handout?","width":5285.181818246841},{"text":"OK, let's start with a quick demo. This very first line is close one, alright, so if I print something here, woohoo 'hi!'","width":784.1818182468414},{"text":"and 'oh no'. ok, right, let's run this","width":695.1818182468414},{"text":"we're calling puts, I could've called printf as well. I get 'hi!' but that's all I get, I don't get the 'oh no!' because standard out is gone, we've closed itl ","width":778.1818182468414},{"text":"so yes, puts might eventually call write but it's just ignored, that output doesn't go anywhere. I could've for example put printf here, I could've put write into one the following the bytes","width":1010.1818182468414},{"text":"it doesn't matter, all of this stuff just goes no where, we've closed that file descriptor so one doesn't have any meaning anymore","width":488.18181824684143},{"text":"the system just ignores any attempts to send bytes to that particular file descriptor","width":433.18181824684143},{"text":"we've closed it, but then where'd my line go... we call open","width":863.1818182468414},{"text":"open says hey I'd like a file descriptor please","width":214.18181824684143},{"text":"let's see what this returns","width":331.18181824684143},{"text":"where's that return gone to, come back here","width":171.18181824684143},{"text":"and I'll print it out","width":153.18181824684143},{"text":"but I'll print it out to standard error","width":264.18181824684143},{"text":"and fd equals","width":873.1818182468414},{"text":"what error did we get?","width":455.18181824684143},{"text":"I better have some includes here. so if we check the man page for open and I need section two, we are going to need the following three includes. let's grab them","width":1224.1818182468414},{"text":"so we printed 'Hi!' and we get back from open an integer one","width":336.18181824684143},{"text":"it's opened a file descriptor for us, a stream, somewhere we can send bytes. except this time rather than making it appear in our console we're going to make it appear in a file and","width":986.1818182468414},{"text":"we gave these options to open to say 'OK, I'd like to open please this file called log.txt, I need to open it for read and write, I want to create it if it doesn't exist, I want to append to it and then finally I'm going to give some options which I also bitwise or about who can read it and who can write it","width":1188.1818182468414},{"text":"these options are saying that only I can read and write it","width":204.18181824684143},{"text":"so let's start printing some things out, like 'Hello', right and we'll run this","width":960.1818182468414}]