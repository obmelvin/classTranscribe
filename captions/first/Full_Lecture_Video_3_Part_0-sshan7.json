[{"text":"good morning cs241 people. how are you this morning?","width":1152},{"text":"great, how's everybody else?","width":256},{"text":"alright, let's try this again. okay, alright, yes, good morning! you've enrolled in cs241, for better or for worse, you'll learn a little bit about systems programming","width":512},{"text":"and for the next 50 minutes, we are going to talk about some new stuff, some old stuff, some [something] stuff, some blue stuff","width":320},{"text":"I lied about the blue stuff","width":64},{"text":"alright so, all I have to do is open my mouth and talk and type. all you have to do is open your brain and think","width":512},{"text":"how hard can it be?","width":64},{"text":"let's try again: good morning people, how are you?","width":256},{"text":"great!! good morning class.","width":64},{"text":"the reason I do that is because maybe we'll get a few brain cells working before we actually dive into this stuff","width":448},{"text":"so, here's the exciting news. yes there are exams in this course. there's no single midterm. instead, there are multiple choice exams scattered throughout the course","width":768},{"text":"and the first one will be on Friday","width":128},{"text":"yes, so, please come on friday, bring your icard, bring a pencil, and look forwards to multiple choice questions which go over the things we've covered so far","width":768},{"text":"anything we've done in lectures or you've done in previous sections, it's fair game.","width":320},{"text":"okay, so I'm looking to make sure basically that you understand the basics of C programming","width":384},{"text":"so as a result, some of the questions we've got today are to do with [something] in C.","width":256},{"text":"alright so, where's my handout?","width":256},{"text":"okay, let's have a look at this first question then","width":320},{"text":"I've written a C process, or any kind of process really, that runs for a long time and it's creating other processes","width":768},{"text":"so for example, it might call fork() and then the child process that you've just created calls exec","width":320},{"text":"but we never wait for our children to finish","width":448},{"text":"but they do. but we never call wait on them","width":64},{"text":"what have we created?","width":192},{"text":"zombies! yes! we've created dead processes, processes that have finished but no one's cleared up after them","width":576},{"text":"now, if you see any zombie movies, you'll discover there's different ways to kill them. right.","width":320},{"text":"but, running away is usually what's recommended in most zombie movies","width":192},{"text":"but fortunately, what we do in C programming is just call wait, and when we do that, the system can kind of clear up the mess left by the zombie","width":704},{"text":"if we don't do that, then eventually, we're unable to create new processes. the system runs out of space","width":448},{"text":"alright so yes, we've created a zombie in this case","width":320},{"text":"so a zombie's a dead process where all we're returning essentially is it's exit status. but it's still taking up a little bit a system resources because we haven't finished cleaning up after itself","width":832},{"text":"and it only happens if no one ever calls wait","width":256},{"text":"so for that, I need a long running process","width":256},{"text":"so let's see what happens in the other case where my child outlives the parent. would you like a handout?","width":448},{"text":"we have a question","width":128},{"text":"that happens when the parent dies.","width":576},{"text":"so that's why the question up there says \"long running parent\". the parent hasn't died. it just doesn't care about its children","width":448},{"text":"the children have finished, alright, perhaps theyve called \"exec\" and done an \"ls\", perhaps they finished doing a computation, perhaps they finished serving a webpage to a client.","width":512},{"text":"the point is, the child processes, once they finish, they're still taking up space","width":448},{"text":"alright so, let's not have a look at a zombie. let's have a look at the other case that you just brought up","width":320},{"text":"which is what happens when the parent finishes first?","width":448},{"text":"so, I've got a little bit of code here, and uh, first of all you could ask, what's it actually print? the answer being nothing! because actually if you look at it, you'll see this #if #endif","width":768},{"text":"those are preprocessor directives to tell the preprocessor to say \"well if this expression is true, then include this, otherwise don't\"","width":576},{"text":"so of course right now, there is no main method. compiler would never actually see the code we wrote in here","width":512},{"text":"I could write garbage in here. like, alright, you know I could write \"superbowl\"","width":384},{"text":"and it's not gonna find an error in there because the actual compiler doesn't check for the syntax. it keeps going until there we go","width":512},{"text":"alright um, let's fix that, let's just say #if 1","width":384},{"text":"and we'll run this and a question for you is, before I run it, how many times is it going to print \"I am process\"","width":640},{"text":"cuz you see it happens before fork()","width":192},{"text":"and secondly, who's sleeping? is it the child that's sleeping or is it the parent that's sleeping?","width":320},{"text":"if you made up your mind, tell your neighbor. see if they agree with you","width":704},{"text":"if you're not sure, at least have a gues","width":192},{"text":"okay! alright! so, who's sleeping? is it the child or the parent?","width":2496},{"text":"the child! remember, fork() returns twice, if you like. because, when we call fork, after it executes, we've now got two processes. we've got the original process, and the clone","width":768},{"text":"the doppleganger","width":64},{"text":"that believes it really is the same original process because it can look back in its mind and say \"yes, I was born in kansas\"","width":384},{"text":"it remembers all the variable states but its actually got a copy of everything (well, nearly everything)","width":448},{"text":"but there's one asymmetric difference which is that, if you're the child, your return value of fork() is zero","width":384},{"text":"so we are asking the child to sleep()","width":320},{"text":"okay, meanwhile then, both processes carry on independently, you can imagine them running on two different CPUs","width":448},{"text":"they're completely different processes. just like you can be running Minecraft and working on your chemistry homework at the same time","width":512},{"text":"and we print something out. we print out our pid and our parent's id. so let's run this...","width":576}]