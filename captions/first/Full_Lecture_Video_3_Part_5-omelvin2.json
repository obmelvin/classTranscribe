[{"text":"right, now then, let's say I want to review some C code","width":640},{"text":"let's say that you're trying to write a function called your version of str[jibberish[()","width":384},{"text":"and it's purpose it to take a pointer to a C string and create a new C string by allocating some memory say on the heap","width":832},{"text":"or yeah, let's say on the heap","width":192},{"text":"and let's have a look at the following code, perhaps we can figure out what's wrong with this code","width":384},{"text":"so, here's the code so far, we call assert() on source then we write a line of code which is going to be a, b or c","width":512},{"text":"then we say 'ok character p equals result' and then we have this idiomatic C loop here","width":512},{"text":"by idiomatic I mean here's a comon way that you see C code written where we want to copy things written from one side to another","width":512},{"text":"what's it do? and then finally we'll return p","width":256},{"text":"here's what it'll do, here's where you come in. I've got three different versions","width":192},{"text":"and also do you notice any errors? ","width":256},{"text":"anything you want to change in this code?","width":384},{"text":"and two other kinda questions down here","width":128},{"text":"alright, have a go with that for five minutes. see if you can answer those questions. what happens for a, b and c","width":512},{"text":"and those other two questions. question two, question three. I'll walk around in case anyone's got any questions","width":18048},{"text":"ok, so, that assert() call at the beginning. the nice thing about assert() in production code it disappears, there's no performance overhead. it's not even evalutated","width":640},{"text":"the macro compiles to nothing, so the purpose of this is during debugging I want to catch early if someone gives me a bad pointer","width":704},{"text":"right, so if we say character result, then anytime we use the variable result in the future it will point to the beginning of the array ","width":320},{"text":"sounds great, we can use up to 256 bytes, in other words a string with 256 pics, 255 letters and a 0 byte at the end","width":640},{"text":"however, this is an automatic variable stored on the stack, which means it's scope is only for the length of this function","width":512},{"text":"if we try to store anything in here, that's ok, but it becomes meaningless after the function returns","width":512},{"text":"so, yes, we can return a pointer to this array, but don't expect that memory to be valid after the function returns","width":512},{"text":"so, that's no good. we need memory that's going to exist for longer than that","width":384},{"text":"so we turn to malloc() to say 'hey give me some memory on the heap please'","width":192}]