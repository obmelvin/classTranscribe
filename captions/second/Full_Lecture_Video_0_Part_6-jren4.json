[{"text":"so now let's do something exciting","width":461},{"text":"let's call fork()","width":614},{"text":"look, I get two different numbers, 188 and 189","width":258},{"text":"I've actually got two processes running","width":216},{"text":"here's what happened: the moment you called fork(), your little process gets temporarily stopped for a nanosecond","width":624},{"text":"so the CPU's not going to execute anything in your code","width":231},{"text":"and we duplicate it","width":135},{"text":"we now have two nearly identical processes running","width":373},{"text":"and then we'll let them go","width":157},{"text":"so remember when I said, you pull a switch and you get an immediate doppleganger","width":207},{"text":"there's immdiately two processes","width":119},{"text":"now one thing you've noticed already is that they have different process identifiers","width":455},{"text":"another way that they're different is that one of them is the parent of another","width":1154},{"text":"let's get that back to result, and let's say...fork gave me the following","width":1102},{"text":"My pid is that","width":135},{"text":"okay, let's run that","width":585},{"text":"so, look at that! I got two processes running at the same time. one of them says \"hey! fork() gave me nothing. it gave me zero. and fork() gave me 203!\"","width":825},{"text":"so these two processes are now running in slightly different worlds. one of them had a different return value. one of them had a non-zero return value","width":533},{"text":"and in fact, the return value is the child process!","width":296},{"text":"so as a parent, if you wish, you could create a child by forking and then immediately kill it","width":403},{"text":"but I'm not going to show you how to do that today","width":157},{"text":"instead, I'm going to show you what happens when we fork() too much","width":732},{"text":"while 1 is greater than 0","width":505},{"text":"let's print that, let's not return, and let's sleep for one second","width":536},{"text":"just so we can kind of follow what's going on. actually, let's sleep for two seconds","width":351},{"text":"Are you ready? let's see what happens now","width":358},{"text":"okay! I've got two processes. OH! how many have I got now? FOUR processes. now I've got eight processes. now I've got 16. Each process, remember, sleeps for a second and then forks. it makes a copies of itself.","width":875},{"text":"so I've got all these running processes because say, I had 4 of them, and all 4 of them called fork(). oh dear, my system has crashed","width":682},{"text":"alright, eventually, my poor machine of course runs out of memory and it's unable to continue. alright.","width":1117},{"text":"so, actually, at this point, the system does its best to preserve itself","width":345},{"text":"it does its best to say \"ahhh, I don't want all these children!\"","width":203},{"text":"I cannot cope","width":98},{"text":"and so it prints out all the debugging information and then decides at random to start killing user processes. the idea being that that's the least bad thing that we could do in this case because we want to preserve the actual main operating system (the kernel running)","width":1101},{"text":"and maybe we'll have a few processes left that are still useful","width":181},{"text":"so let's see if I've even got a- no, I don't got anything do I?","width":216},{"text":"no, it's dead","width":64},{"text":"but that is an example of a fork() bomb. as you can see, it's pretty mean to everybody else that happens to be logged in to the system at the time","width":789},{"text":"so, when you start using forks for the MP, good luck!","width":378},{"text":"and try not to write fork bombs","width":133},{"text":"and with that, we'll finish there and I'll see you on Wednesday!","width":204}]