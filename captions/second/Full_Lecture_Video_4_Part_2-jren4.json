[{"text":"ok, we can also discover if the child exited due to a signal, so let's do that as well","width":562},{"text":"so let's say 'look if WIFSIGNALED then let's find out what singal it was","width":631},{"text":"okay so how do I pull out that? I think it's WSIGTERM? -TERMSIG, ah. ok","width":772},{"text":"and we can print out a helpful message right because not everyone knows those numbers so what is the number for SIGALARM? it's just this constant here SIGALARM","width":861},{"text":"right, shall we run this? let's try it. see what errors we have here","width":442},{"text":"ok, what have I messed up. SIGALARM, argh, right, let's try that","width":1147},{"text":"ok, where's the mistake? line two","width":1285},{"text":"hooray! ok, so it prints 'Hello World', starts up and then the parent says 'child exited due to signal 14 alarm clock'","width":515},{"text":"let's make another program over here that - let's see, I'll tell you what I'll have a pointer","width":802},{"text":"there we go, and it can be a random number","width":346},{"text":"just cast that into an integer pointer and into p we will write the value 42","width":651},{"text":"will it crash? who knows what it'll do","width":161},{"text":"ok, so this time we go 'child exited due to signal 11' what's signal 11? well ok it's not going to get you invited to any parties","width":474},{"text":"but it's turns out signal 11 happens to be segfault","width":303},{"text":"so, we could keep going with this and say 'look if the thing was' - I'll just write it - 11. I could spend some time - \"oops, seg fault - write a better a program!\"","width":1556},{"text":"so you see those messages like segmentation fault and an error that commonly comes up that says 'segfault write a better program'","width":384},{"text":"right, so, you see those messages like alarm clock, segmentation fault, that kind of stuff. they dont' just appear in the terminal by magic, no!","width":414},{"text":"the shell is doing what we're doing here and that's what your fake program is going to do as well. that after a command finishes use these macros to discover what happened to your child and print out the relevant information","width":1168},{"text":"so, questions about that?","width":412},{"text":"alright, so, now you actually have enough knowledge to write not only make, but a shell","width":511},{"text":"and we're going to have an MP based on that where we can take just user input, what you type onto a keyboard and then start executing programs","width":784},{"text":"so the shell that we normally see is either bash or a simpler version called just sh, but it's just a C program that reads input and then calls exec()","width":663},{"text":"based on what you typed","width":289},{"text":"ok, other questions about this?","width":278},{"text":"alright then, let's have a look at some other questions on here","width":321},{"text":"so, when I start my program and I want to find out what arguments it was given. so for example, suppose someone did this","width":917},{"text":"how would I actually discover the first argument? ","width":792},{"text":"it would be in argv[1]","width":313},{"text":"so what would we expect to see in argv[0]?","width":1301},{"text":"argc","width":592},{"text":"it's ./program and i'll make this the right size","width":380},{"text":"it's just the name of the actual program itself","width":651},{"text":"and let me show you actually how - yes? uh huh. yes. what? yes.","width":1921},{"text":"so a segfault happens because for example your program tries to write into some memory location that it's not allowed to","width":647},{"text":"and this generates a hardware interrupt by the memory controller to say 'ahaha, you are trying to write into say a kernel address space or into a page of memory that doesn't exist. this doesn't look good to me'","width":860},{"text":"at that point the kernel says 'this process is not behaving well, I'm going to shut it down. you never get the CPU again' and so the process is pulled away form the CPU, it's not allowed to execute anymore of your assemlby, anymore of the satemetns","width":1119},{"text":"and instead the kernel makes a note of the fact that this is a bad process. we killed it due to a segfault. yes?","width":785},{"text":"yes. ","width":237},{"text":"the alarm can go off during sleep","width":212},{"text":"all the sleep says is don't allow this process access to the CPU for about two seconds","width":496},{"text":"there are actually some possibilites where it might come back early or - there's no guarantee it will be exactly two seconds","width":395},{"text":"we're not playing here with perfect real time operating system. it's to the best it can do give whatever load the system's under","width":537}]