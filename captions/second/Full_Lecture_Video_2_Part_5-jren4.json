[{"text":"okay so if this works, then what we should see is the child will sleep for two seconds and our parent will then be paused also for two seconds","width":801},{"text":"because it had to wait for the child","width":361},{"text":"okay, so one, two, bye and then our parent can continue right?","width":389},{"text":"so we've made the parent wait for the child","width":312},{"text":"now there's a little bit more to using waitpid","width":321},{"text":"that actually there are some macros down here ","width":389},{"text":"here they are, that actually to put useful information out of this, I should use these macros","width":380},{"text":"so for example, we can find out the exit value of the child but only the lowest seven or eight bits","width":702},{"text":"sorry, eight bits, so if your child return a value 42, great we can see that","width":495},{"text":"if it returns a value 304, I'm sorry you won't see that as a value, you only get the lowest eight bits","width":426},{"text":"we can also check to see if it was terminated by a signal","width":224},{"text":"right, how can you generate a signal?","width":291},{"text":"pull our a whistle from your pocket, yeah but you could also press control c on your keyboard to interrupt a process","width":448},{"text":"and when you interrupt a process, you are sending that process a signal","width":428},{"text":"there's other signals that can happen as well","width":159},{"text":"so if your process tries to write into read only memory, your process dies","width":438},{"text":"how does it die? it gets sent a signal that in cannot ignore","width":285},{"text":"so as you can see, we can actually find out some things about our child","width":303},{"text":"and you'll be using that in this week's little assignment before section","width":488},{"text":"alright so let's make it print something out, right so in this case what we'll do is we will say","width":706},{"text":"if it exited, so let's check the value of status","width":373},{"text":"then we'll print out the exit value","width":528},{"text":"WEXITSTATUS we'll get those lowest bits and we'll make the child return 42","width":1515},{"text":"did it run? one error, what's my error?","width":811},{"text":"oh, okay so I have not included something..","width":1038},{"text":"one two yay, okay great","width":168},{"text":"so this time you can see our waitpid got some arbitrary value","width":288},{"text":"if you actually want to pull out the exit value then you should use those macros","width":453},{"text":"alright so if exited, then we know that we can actually pull out an exit status as well","width":410},{"text":"right, so how do I wait for my child to finish? waitpid!","width":351},{"text":"and on here how do I find the exit value? you should use the if exited then we can use the WEXITSTATUS macro","width":1113},{"text":"and all these macros do is just pull out the relevant bits and do some bit shifting from that original integer","width":697},{"text":"okay, right so are you ready? page 2","width":413},{"text":"how do I start a background process? well a background process is something that we want to run in the background","width":379},{"text":"right we don't care about interacting with it","width":365},{"text":"maybe I want to actually say compile a program in the background","width":227},{"text":"let's do it from the command line here so","width":404},{"text":"for example if I want to look at the contents of /usr/include/stdlib.h","width":522},{"text":"right, I could say that actually I just want to send that to a file","width":609},{"text":"but I don't want to wait for this to finish well I can just put an ampersand at the very end","width":318},{"text":"that means run it in the background","width":206},{"text":"and I can continue doing this whilst that copying happens","width":392},{"text":"we could do the same thing in C by not bothering to wait","width":650},{"text":"so I've got my fork here and I could do other stuff in the background ","width":476},{"text":"sorry I could do other stuff inside the parent and not wait for the child to finish","width":313},{"text":"so this is why fork is very powerful right? now I can fork and start a process to compile something. I could fork and start another child process to connect to the internet","width":563},{"text":"and I don't have to wait for these things to complete","width":164},{"text":"I can do things in parallel yay","width":201},{"text":"right, so now if you've got 4 CPUs you can use all four at the same time to compile different parts of your program for example","width":557},{"text":"there is a problem though","width":397},{"text":"good parents don't let their children become zombies","width":437},{"text":"suppose you created a child process and off it goes and it starts compiling stuff","width":439},{"text":"and then you the parent process finish, you quit","width":252},{"text":"what happens to the child process?","width":142},{"text":"it's still alive! ha ha ha compiling alive, it's still going right!","width":449},{"text":"but it has no parent","width":198},{"text":"uh oh, right, so, uhm, so here's what happens, if nobody is around to wait for the child when it finally finishes","width":1095},{"text":"if you don't call wait on a finished process, you get a zombie","width":277},{"text":"so a zombie is a dead process","width":150},{"text":"that no one cares about","width":228},{"text":"so waitpid is like going to the gravestone and saying yeah I remember you let's do a postmortem ","width":228},{"text":"if you don't do that to a process, the system says well actually somebody might want to know about that process","width":392},{"text":"they might want to know its exit value for example","width":138},{"text":"so it's going to take up some system resources, not a lot, but a little bit to remember what happened to that child","width":557},{"text":"so that's what a zombie is, it's a dead process that nobody cares about","width":506}]