[{"text":"Right, um..","width":128},{"text":"No need to need to remember that until you actually write your own allocator","width":256},{"text":"Okay, so let's just think about some of the comparisons of these then","width":320},{"text":"So what we'll do first here: what's one of the advantages of first fit?","width":256},{"text":"It's fast! As soon as it finds some space, hey we're done! We don't need to do any more","width":576},{"text":"Okay, what's one of the advantages, say of best fit? Or any disadvantages?","width":640},{"text":"Okay, so, think it's least amount of fragmentation","width":576},{"text":"Because it's ideal!","width":960},{"text":"Okay, so that is uh, do we know that for sure?","width":256},{"text":"It appears to be from this example, right?","width":320},{"text":"But is it true? In all possible uses?","width":320},{"text":"What about disadvantages?","width":512},{"text":"It's slower than first fit","width":512},{"text":"Because we have to check all spaces","width":384},{"text":"Okay, let's do worst fit and I'll come back to this one","width":512},{"text":"Right, what about worst fit?","width":128},{"text":"Yes, it's slower than first fit again because now we have to go through","width":640},{"text":"Any advantages to it?","width":384},{"text":"Any other disadvantages to it?","width":128},{"text":"Let's think about what we're doing for a moment.","width":320},{"text":"So worst fit is always going to find the largest space and use that","width":384},{"text":"So that means in a longer-running program, if you've got a giant space, it's going to quickly be eaten up","width":320},{"text":"So with worst fit, what you find is that you end up with lots of kind of medium-sized spaces","width":448},{"text":"Yeah, we can always go back to the system and say, \"Hey, system, I need some more memory\"","width":704},{"text":"But what we're trying to do is see what our fragmentation looks like given the space we've got","width":320},{"text":"So, because we keep attacking the largest space, means that we don't have one large area should a giant allocation request come in","width":768},{"text":"Alright, now we've got these medium-sized holes, these medium-sized spaces, scattered all over our memory space","width":576},{"text":"So we cannot satisfy very large requests","width":320},{"text":"But we keep attacking that large block, right?","width":640},{"text":"I'm trying to think of a good analogy, but uhh","width":384},{"text":"You always can say, \"Oh look, I've got this really really big block at the end, I'll keep using that\"","width":256},{"text":"Now what we haven't talked about is think about the fact that our memory gets freed up as well, okay?","width":384},{"text":"So, this large block keeps getting attacked, and we end up with smaller, medium-sized blocks scattered through our memory if we run this process for long enough","width":640},{"text":"We're always attacking the largest space, we're always kind of nibbling bits off it","width":576},{"text":"So best fit seems to be, \"Hey, we're not going to get much fragmentation, we're always trying to find the perfect jigsaw puzzle\"","width":576},{"text":"The problem with, yeah?","width":192},{"text":"Yeah, yeah there are some interesting caching issues, yes","width":1856},{"text":"Okay, okay, okay, so the question's about, \"hold on, we've got virtual space, with virtual memory you can actually do some interesting mapping to real memory\"","width":1344},{"text":"Yes, that is true","width":192},{"text":"However, that mapping happens at four kilobyte chunks","width":192},{"text":"Um, so, we can't completely get away from our fragmentation issue","width":384},{"text":"So, yes, underneath this for the real memory, we can avoid some fragmentation","width":576},{"text":"Given that malloc actually has some space, you know it's got a low address and a high address, our question is how can we efficiently use this memory?","width":512},{"text":"Right, so, I want to address this least fragmentation thing","width":256},{"text":"It appears to be ideal. It can be, if you set up your simulation correctly, but when you, uh, run it under more realistic conditions, what tends to happen is you end up with lots and lots of tiny, tiny, tiny little holes. Or tiny pieces of spaces.","width":1024},{"text":"So you could imagine that you've got, say, a request comes in four 15 kilobytes and you happen to have a 16 kilobyte space free, so you'll use that","width":768},{"text":"Now you end up with this tiny 1 kilobyte unused space","width":320},{"text":"So, in practice, best fit tends to give you these tiny, tiny spaces which are difficult to reuse","width":640},{"text":"So, quite often, some variant of first fit actually turns out to be a pretty good choice","width":512},{"text":"What first fit tends to do is the size of the holes tends to vary as you walk further down your list of free spaces","width":576},{"text":"So, this is actually often a pretty good choice","width":192},{"text":"Okay, so that was placement strategies","width":448},{"text":"Let's talk about a few other things with memory","width":448},{"text":"So we talked about where it's stored in memory","width":320},{"text":"It's stored just above the code and the global variables","width":192},{"text":"And we can call sbrk to say, \"oh we need some more space\"","width":256},{"text":"So what then are the challenges of actually writing a good malloc?","width":384},{"text":"How are we going to keep track of which parts of our memory have been allocated and which parts are free?","width":512},{"text":"What would you use?","width":128},{"text":"If I said to you right now, \"Okay, start writing a malloc\", how would you keep track of","width":576},{"text":"Say again?","width":192},{"text":"An array of what?","width":128},{"text":"Okay","width":448},{"text":"A disjoint set of regions in memory, okay","width":576},{"text":"Okay, so here's what I'm going to ask you to start with is just a simple linked list","width":256},{"text":"We can start with just a linked list of what's been allocated","width":320},{"text":"And what's been freed","width":192}]