[{"text":"okay, alright! so, what do we got here","width":354},{"text":"I got three variables: var1, var2, and arrrrrayyy!!!","width":287},{"text":"alright, just to point out that this is an array. and they all initialized to \"hello world! bounjour!\"","width":557},{"text":"now, there's a big difference between these and to point it out first of all let's talk about this very last line","width":404},{"text":"no, it is not possible to do this","width":548},{"text":"what this line is trying to do is say \"hey! I've got a pointer called array. make it point to the same thing that var2 is looking at\"","width":390},{"text":"no, you cannot do that. if you use just the array name here, it's treated as a pointer but there's a couple of big differences","width":780},{"text":"first of all, you can't change it","width":128},{"text":"this variable is the beginning of the array","width":384},{"text":"you can't make it point to a different piece of memory","width":278},{"text":"secondly, if you ask the size of array, you'd actually get back the number of bytes of the actual array","width":446},{"text":"unlike a pointer where it would tell you the number of bytes required to hold a pointer","width":253},{"text":"so no, you can't change array and make it point to something else","width":225},{"text":"you can, however, make a pointer to a character point to a character array. that's okay!","width":427},{"text":"now you've got var1 holding the same address that array hold","width":572},{"text":"alright, now, what about these other things up here?","width":192},{"text":"okay, strcpy! I want to copy into the array var1","width":251},{"text":"is that okay?","width":189},{"text":"if you said it's okay, you're correct!","width":276},{"text":"okay, why is that?","width":189},{"text":"well, here's what happens. we're actually saying \"I need an array and I need it to be big enough to hold the following data\" (bonjour)","width":582},{"text":"and when we run our program, when we start the process, we have a little array, here it is, and bonjour is copied into this array","width":1099},{"text":"so, our array lives in memory that you can read and write","width":233},{"text":"so if you want to copy other stuff into the array, yes, go for it. it will work. just remember that the array isn't an infinite length. it's fixed size. so you better make sure you accidentally copy too many bytes into this data structure","width":845},{"text":"so we're fine, we do strcpy into var1","width":191},{"text":"so that's okay, what about strcat var2 into array one?","width":209},{"text":"that looks fine too, ary is mutable, we can change it","width":456},{"text":"okay, here's the exciting part. yes, we're calling strcat so we are appending characters onto our array","width":480},{"text":"but you and I know that this array is not going to be big enough to hold whatever it is","width":442},{"text":"\"hello world\"","width":119},{"text":"we're gonna write the data w-o-r-l-d and a NULL byte past the end of the array","width":479},{"text":"who knows what's going to happen? woohoo. we don't know!","width":233},{"text":"it depends on how things are laid out in memory but I'll show a little demo in a moment just to show what happens","width":355},{"text":"whoops, what we have here is a buffer overflow. we had a buffer which is just our little array and we went past the end of it","width":579},{"text":"we wrote into memory that we should not have been writing into. we didn't own that memory. oops.","width":411},{"text":"and, I want to point out that this can happen not because you were just thinking about. you didn't think about memory slides. it can happen through typos.","width":623},{"text":"when you intended to say strcpy and instead your fingers wrote strcat","width":592},{"text":"bad things could happen. alright. especially if your pointer happens to point to arbitrary data at this point","width":365},{"text":"strcat is going to say \"okay! I'll copy this data for you. I just need to walk along this data and find a NULL byte\" and off he goes! bye!","width":581},{"text":"so be careful when you write strcat strcpy, just take a moment to check you actually wrote the intended one. of course, I've never had that mistake hahaha.","width":653},{"text":"and, what about strcat var1 var2? can I copy from what var2 points to into what var1 points to","width":849},{"text":"if you said yes, at least say it confidently because you're incorrect","width":381},{"text":"no you can't. var1 and var2 hold the memory address of this constant","width":560},{"text":"so yeah, you can change var1 you can make var1 point to something else. here we go. var1 equals hey, point to this other thing.","width":466},{"text":"hey, hold the value NULL","width":128},{"text":"ecetera. I can certainly make the contents of var1 be different","width":412},{"text":"but in this particular case, what it's pointing to is memory that is read only","width":502},{"text":"so if you try to start writing bytes into that address var1 points to, ah ah ah! no, you won't. the hardware will detect that and say \"you can't do that\" I'm only giving you read access to those bytes","width":950},{"text":"alright, any questions? yes! yeah. yes. the compiler will spot that","width":754},{"text":"so array names are special","width":387},{"text":"uh, it can be treated as a pointer. if you need a pointer, the compiler will turn that name into a pointer.","width":497},{"text":"and the pointer is at the beginning of the array","width":250},{"text":"alright, so, if you do things like ary+3, that will add 3 times however big each element is","width":576},{"text":"so if you point to an integer array, it will be array + 12 bytes","width":265},{"text":"if you're on a 32-bit machine with 4-byte integers","width":247},{"text":"alright so, remember, the compiler is just turning this into assembly code so it uses the type information","width":447},{"text":"and if its trying to get a pointer, it turns into a pointer","width":330},{"text":"okay, other questions. yes! uh, so var1 the variable itself is mutable. we can make var1 point to anything else. but yes, you are correct. I could now write strcpy var1 after this","width":1870},{"text":"okay, so, this is okay now. because var1 is pointing to the array. so of course I can copy okay into the array","width":754},{"text":"alright, we should talk about uh, I forgot to free memory. we do not need to free these memories. these are not on the heap","width":574},{"text":"you've actually got more than just the stack memory and heap memory","width":300},{"text":"you've got static memory where you'll discover these constants go","width":487},{"text":"where also our global variables go as well","width":178},{"text":"so you see heap memory when you call malloc. alright, that's how you get heap memory","width":564},{"text":"we haven't done a whole lot of malloc-ing yet","width":111},{"text":"and you see stack memory when you make a variable inside a function","width":556},{"text":"alright so here we go","width":154}]