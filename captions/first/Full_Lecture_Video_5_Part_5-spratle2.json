[{"text":"So if we go back to our picture that we were drawing","width":448},{"text":"To say 'Oh, look, this has been allocated, this has been freed, this has been allocated, this has been freed.'","width":704},{"text":"What we need is a way to say, 'Okay these are just entries inside a linked list.'","width":768},{"text":"And I can walk along these looking for blocks which are, say, large enough.  And then when I find a block (let's say I'm going to use this one), I need to update my data structure so that I've now got an entry to say 'Hey, this part has now been allocated, and'","width":1600},{"text":"'I've got some remaining space.'","width":128},{"text":"And we go back.  So we can choose to take a block out and turn it into some space and some remaining free space.'","width":1088},{"text":"Which of course if that's zero, you don't need to have this entry.","width":64},{"text":"When you call free someone's going to give you a pointer to one of these used areas.  ","width":1408},{"text":"And we have to go through our linked list then to update our counting - to say, 'Okay let's turn this now into some free area.'","width":640},{"text":"Remember how I gave a little advert about coalescing blocks?  Well, our work may not be done because you can imagine that, over here, I've got a free block, and on this side I've got a free block.","width":1344},{"text":"So I now need to update my counting on my linked list to say 'You know what this is now just one giant block if I've got it on both sides, a huge block of free space that can be reused.'","width":1024},{"text":"We could do this really, really inefficiently by having a linked list and then when someone says, 'Oooooh!  Free a pointer.'","width":1088},{"text":"I'll just walk through my linked list until I find my entry that corresponds to that pointer.  Oh my gosh, that'd be really slow.  Okay, I'll tell you what, I'll use a hash to speed it up.  I'll have a quick hash so that I can find my pointer and go back to my pointing structure and update my linked list structure correctly.'","width":1472},{"text":"When actually we can do a lot better than that.","width":320},{"text":"We can store our linked list structure as part of the memory that we allocate.","width":576},{"text":"Here's a clever trick.","width":384},{"text":"Let's allocate some memory and we'll allocate a little bit too much.","width":448},{"text":"So if the user says, 'Hey, malloc() 100 bytes we're going to malloc() say 120.'","width":576},{"text":"And we won't tell them, okay?  As far as the caller is concerned, they're just getting 100 bytes.'","width":576},{"text":"But the reason we did this is because we're going to store some secret information back here that's actually our linked list information (our pointer to where to go next).","width":640},{"text":"Wheeeee!","width":320},{"text":"When we return, don't return the pointer to the beginning of here.  No, make sure you bump up the return value so that the return value from your malloc() actually says, 'Okay, user program: here's a little space, here's the 100 bytes that you wanted.'  So we'll add our twenty bytes or however large you made it.","width":1728},{"text":"And when the user later says, 'Okay!  I'm done with my pointer.'  When they call free(), we have to play the other trick and go the other way and say, 'Okay now where did that block REALLY start?'  Let's subtract our 20 bytes again.","width":1152},{"text":"And if we do that, we can find our pointer.  Our linked list structure.","width":320},{"text":"So we're hiding the link information inside the allocation.  Pretty sneaky, huh?","width":576},{"text":"It gets even sneakier than this.","width":320},{"text":"We're going to do two more little things to make it really, really sneaky.","width":384},{"text":"First of all, we'll discover that we actually need to be able to go the other way.  If we start with a block over here, I actually want to be able to kind of have a doubly linked list.  I want to be able to go back to the previous block.","width":896},{"text":"So not only do I want to store the pointer to the next, I want to store the pointer to the previous.  So I'm going to put that over here.","width":576},{"text":"And I'm also going to actually store this information at the end as well..","width":576},{"text":"So if I come over here, I can always look at the previous block and say, 'Okay, where are you?  Where's your start?'","width":512},{"text":"The other thing that we can make use of is rather than storing actual addresses (pointers), we can just store numbers.  We can store the number of bytes and then use pointer arithmetic.  If you know that this is 120 bytes long, and we're looking at the beginning here, then we can just add 120.  We can just store 120 as the size of this thing.","width":1536},{"text":"And we can jump to the next entry.","width":320},{"text":"Or if we look back here to the previous value, then actually we're looking back at the previous block.  And if this makes a note of how big it is, like this one's 200, then we know that we can jump back 200 bytes.","width":960}]