[{"text":"Alright, so, this little function can say initially we are going to just sleep for one second","width":704},{"text":"and then put something like \"HI!\".","width":128},{"text":"Ok, right, so its gonna print \"HI!\"","width":192},{"text":"So, now, I've got a program that is going to use two CPU's, if I have two CPU's.","width":384},{"text":"Uh oh, what happens if I only have one CPU?","width":384},{"text":"The scheduler!  The Linux Kernel is going to say \"okay, you get access to the CPU for say 10 milliseconds or 100 milliseconds","width":704},{"text":"and after that amount of time, I'm going to take you off the CPU and let the other thread use it.","width":448},{"text":"And if we do this faster enough, like 10 milliseconds or so","width":192},{"text":"then those slow humans will never notice, that actually only one thread at a time is on each CPU core","width":576},{"text":"And if it turns out that you make a system call like \"open\" or \"read\" and it takes time for us to read that stuff from the disk","width":448},{"text":"Then you don't need the CPU because you are waiting for stuff so I can give the CPU to someone else.","width":256},{"text":"So the scheduler has to make those decisions and make them well.","width":256},{"text":"Ok, so for example this sleep, you don't need any CPU to sleep.  I can let another thread use that.","width":448},{"text":"So, what were we going to do here...","width":192},{"text":"Oh yes, let's change this so we can cancel our little \"HI\" function.","width":192},{"text":"We'll sleep for 3 seconds here and then change to something like \"please_stop\".","width":448},{"text":"And then I will just loop forever.","width":256},{"text":"So, what do were want to do here?  We want to say \"while (!please_stop)\" keep going around.","width":448},{"text":"And finally, let's have a global variable...there we go.","width":320},{"text":"We know in C that our global variables are initialized to zero.","width":256},{"text":"Let's run this and see what mistakes we made.","width":128},{"text":"(waiting)","width":576},{"text":"Ok, alright.  Whoops, we didn't declare the thread id.  So, what's that?  \"pthread_id\" I believe.","width":512},{"text":"(waiting)","width":896},{"text":"(grumbling)","width":128},{"text":"","width":192},{"text":"Oh, I just put a \"t\"","width":128},{"text":"","width":320},{"text":"How about that?","width":64},{"text":"","width":256},{"text":"Yay!.  Ok, alright.","width":128},{"text":"","width":64},{"text":"So we print \"HI!\".  Our main thread sleeps for a bit and then calls \"please_stop\"","width":448},{"text":"And our little thread that is going around the loop says \"oh, look at that global variable, I better stop\".","width":192},{"text":"Now I use global variables for a quick demonstration. Obviously we could put that inside a struct.","width":256},{"text":"We could pass something to the working thread inside here and we could use that to communicate with the other struct","width":704},{"text":"so we could have some control if we agree to share some memory.","width":256},{"text":"","width":64},{"text":"Now I can hear my CPU fan going.","width":192},{"text":"(fan noises)","width":64},{"text":"Do you hear that?  Good.","width":192},{"text":"Because the CPU is constantly doing that little while loop in the main thread.","width":320},{"text":"So let's do something better than that.","width":64},{"text":"What we would like to do of course is wait","width":128},{"text":"What we would like to do of course is wait for the other thread to finish.","width":256},{"text":"One way to do that is to say \"pthread_join\" and say \"here is the thread that we want to finished\"","width":384},{"text":"And we would like to know it's exit value.","width":128},{"text":"There we go.  We can find out what it is.","width":256},{"text":"Alright, here is my exit value and we can say return something here","width":576},{"text":"So what when we call \"pthread_join\" again, this second thread is going to not require anymore CPU time.","width":448},{"text":"Because not it is waiting for the other thread to exit.","width":256},{"text":"","width":384},{"text":"So that is one way to write this program.","width":128},{"text":"","width":128},{"text":"I can also talk about \"pthread_exit\"","width":576},{"text":"Let's write a very dangerous program.","width":320},{"text":"This is the \"_killer_monsters_take_over_the_world\".","width":768},{"text":"You will agree that we probably should not run that function, yes?","width":320},{"text":"Well that's okay, because I am going to call pthread_exit before it.","width":384},{"text":"And I do not need a return value.","width":384},{"text":"\"pthread_exit()\" says \"hey, I am the chef and I am done.  I'm leaving the kitchen for good\".","width":512},{"text":"If you call pthread_exit then, you are saying \"this is the thread's return value\" and no more code will be run by that thread.","width":704},{"text":"\"_killer_monsters_take_over_the_world\" will never happen.","width":192},{"text":"","width":320},{"text":"This stuff about having \"exitvalue\" and \"pthread_join\" in this case, that is never going to happen.","width":320},{"text":"\"pthread_exit()\" simply means \"I am done\".","width":256},{"text":"","width":192},{"text":"A little bit of knowledge for you, if you call \"pthread_exit()\" inside the main thread, the original thread, like we did just did","width":448},{"text":"the rest of the process will actually keep on running.","width":320},{"text":"The pthread library actually says \"you know what?  I am actually not going to quit this process immediately","width":192},{"text":"I am going to wait until ALL threads have finished\".","width":256},{"text":"","width":320},{"text":"Let's prove that.  Let's call \"pthread_exit()\" here.","width":320},{"text":"","width":128},{"text":"I'm going to comment this out so it compiles.","width":192},{"text":"","width":128},{"text":"Instead I will call ... nah, this is good.","width":384},{"text":"So then, what will my program do now?","width":320},{"text":"","width":384},{"text":"That's right, it is just going to keep printing \"HI!\".","width":128},{"text":"It is not going to take over the world.","width":128},{"text":"Instead what we did is we created another thread and our main thread exited.","width":448},{"text":"","width":384},{"text":"So, let's go back to this.","width":128},{"text":"","width":192},{"text":"Let's answer some of these questions.","width":128},{"text":"What is the difference between exit and pthread_exit?","width":192},{"text":"What does exit do?","width":128},{"text":"It kills the whole process.","width":256},{"text":"Yes, it says \"Hey, this process is done and here's the exit value.","width":320},{"text":"By the way, it also does a little few extra things for you.","width":192},{"text":"If you've written to the C output buffers, like stdout and stderr or anything else","width":384},{"text":"those get flushed and those file streams get closed for you.","width":192},{"text":"","width":384},{"text":"So if you call exit, all of your threads are gone.","width":320},{"text":"\"We're done\"","width":128},{"text":"Your process is done.  And it doesn't matter which pthread calls exit().","width":448},{"text":"You are saying \"This whole process is done. Wrap up the shop, close all of the kitchens.  We're gone.\"","width":512}]