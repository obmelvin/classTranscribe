[{"text":"and we'll talk about scheduling later on in the course","width":249},{"text":"okay so, just a quick little bit a fun here","width":258},{"text":"let's have a look at /usr","width":192},{"text":"sorry, /usr/bin","width":167},{"text":"alright, whole load of programs","width":256},{"text":"but I want to show you something slightly surprising about these programs, umm","width":585},{"text":"they're actually, they're all fakes","width":285},{"text":"the programs like who which ls, etcetera, they're all just pointers. they all point to something called \"busy box\"","width":581},{"text":"so, the busy box program is written so to support all these different commands","width":492},{"text":"and the first thing it does when it starts up is it says \"what am I running as?\"","width":239},{"text":"am I running as ls? am I running as wc? or some other command?","width":297},{"text":"in which case execute different code","width":238},{"text":"and so you'll see this in this little example here. you'll see in router boxes. you'll see it in your android phone, because it's a way to include a lot of commands without requiring lots of large programs","width":819},{"text":"all tend to do kind of similar things","width":134},{"text":"so it's a way to save some memory","width":158},{"text":"alright, so that's one use of argv[0]","width":496},{"text":"alright, what's special about argv and argc?","width":302},{"text":"it's a NULL pointer!","width":472},{"text":"so, next time you want to scan through all of the arguments, either just use argc to find out how many are there, or just have a little loop that keeps incrementing through those pointers and when you get to NULL, you know you've got to the end","width":1003},{"text":"so typically, if this is the array, you're gonna ignore the first one because that's not a real argument","width":492},{"text":"you know the first one is the actual arguments it was sent so in this case it would be kind of \"file.txt\"","width":581},{"text":"and then we'll have some other arguments that the user might have supplied, and the last one will be NULL. won't point to anything","width":501},{"text":"so don't try to strcat that, for example, don't try to read from that location or you'll get a segfault","width":759},{"text":"okay, let's do page 2!","width":1213},{"text":"so why do shells exist?","width":451},{"text":"could we have an operating system without a shell?","width":265},{"text":"yes we could. but it would be hard to type stuff in.","width":220},{"text":"right it would be hard to execute anything and it would be hard to call things because before you could call things on the operating system, you'd have to write a C code and compile that in order to call the system calls.","width":992},{"text":"but what I want to impress upon you is that all of the commands that we might call from our shell, are really just more C programs","width":740},{"text":"well, they don't have to be C, but for the system programming stuff, they tend to be and some of those can be, tend to be, very very small","width":402},{"text":"so for example, you might stat that we'll see later to find out something about a file","width":438},{"text":"let me go back to my home directory okay, stat program","width":355},{"text":"and this tells me some basic information about a particular file on disk. when it was last modified. who owns it. where it is. what kind of file it is. etcetera. but guess what. this little program just makes use of system calls","width":1123},{"text":"and if I was to call, find out the manual of stat, uh, you discover that on section 2, there's a call called \"stat\" where I can pass in the name and pass in a pointer to a buffer to get all that information out","width":1250},{"text":"so that stat program, fundamentally just makes this call and then has a couple of printfs in order to format the information inside the buffer","width":863},{"text":"so, the shell exists in order for us to basically make, uhh, to be able to do things efficiently without having to continually create new programs","width":878},{"text":"so how would we get our shell to print \"segfault\" or \"alarm clock\" ? easy!","width":553},{"text":"see page 1","width":89},{"text":"hello let's flip back over we've just done it! alright, call waitpid, find out how the process finished, and then take an appropriate action like \"hey! your child process just quit due to a segfault\" or just quit due to an alarm message","width":1201},{"text":"or just died because uhh, you pressed Ctrl-C and we sent a SIGINT to a process","width":446},{"text":"you can do that. now, just using a fork and exec","width":307},{"text":"alright then, so, here is an attempt of implementing a shell","width":507},{"text":"it's called the lol cat's shell","width":306},{"text":"and but there's a couple things wrong with it","width":211},{"text":"perhaps you could figure out why this is not a good shell. how many errors can you see in this code?","width":392},{"text":"[long pause]","width":7872}]