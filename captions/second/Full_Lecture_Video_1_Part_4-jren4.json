[{"text":"that is going to be inside my heap","width":517},{"text":"well we're not doing that right now. we're playing things which are either constants or declared outside of functions","width":570},{"text":"let's do a quick demo. right, good","width":514},{"text":"here is the code we've got. I don't want this right now","width":683},{"text":"but I've done one extra thing, is I've made another array called demo. It's got the characters 1 2 3 4 5 6","width":594},{"text":"and I'm going to print it out twice. so we should see 1 2 3 4 5 6 twice, right","width":652},{"text":"but of course, because you know it's a demo, we're not going to see that. let's see what we get. oops, we have to turn off the asserts","width":856},{"text":"OK, we're not going to see that. this is what we saw instead. 123456. OK, so we've printed out the characters","width":783},{"text":"and then d and a smiley face. where did that come from?","width":867},{"text":"for some reason demo got obliterated by a d and smiley face and of course the null byte","width":633},{"text":"why? because first of all we copied var1 in and then we did a string cat and copied var2 into our array.","width":857},{"text":"but our array was not big enough to hold 'Hello..!' and 'World:-)'","width":485},{"text":"strcat doesn't know that, it merely copies the bytes until the end. and so it kept on going and it ran into the memory that is being used by demo","width":670},{"text":"and we could kind of prove that they are next to each other. let's have a look at where they are. so we can say, hey the array is at this address and demo is at this address","width":1380},{"text":"there we go. so array is at some low address and demo is at another low address, but just next door","width":670},{"text":"doing the mental arithmetic to subtract those two numbers is left as an exercise to the reader. but it's pretty close, yeah? it's about ten bytes","width":837},{"text":"right, that's our little demo. let's go back to our sheet. so let's talk about converting things","width":477},{"text":"if I've got a string and I want to convert it into a simple integer, how can I do that? well here's the easy way. use atoi","width":776},{"text":"so for example atoi of a hundred gives you the integer hundred","width":1033},{"text":"what do you think atoi of bananas is? ","width":1381},{"text":"place your guess now","width":701},{"text":"it's zero! so here's the downside of using atoi, yes it's really really quick. it's trivial to write code, but you'd better trust that what you're going to get is a valid integer that can be converted into a standard c integer because if it can't it doesn't crash, it doesn't complain, you have no way of knowing other than the fact that you got the value zero","width":1468},{"text":"so this returns a value of zero. so you don't know whether the user typed zero, entered zero, or whether it was invalid input","width":460},{"text":"so use it for little demos, quick hacks, etc., but if you actually want to check whether things are valid or not then it's time to use scanf","width":887},{"text":"because scanf will tell us how many things it successfully parsed. lets make a little scanf demo","width":1154},{"text":"OK, three integers walk into a program. there you go x y z. and I've got a string that I want to extract some values for","width":903},{"text":"maybe this is some 3D vertex data for example and I could use this function called scanf to say 'alright here's my input and I want you to treat it as an integer followed by some white space, another integer followed by some whitespace and another integer'","width":1164},{"text":"OK, how do I push that out? I need to give it the address of my variables. so remember ampersand means tell me the address of this thing","width":993},{"text":"OK and now if our program works","width":984},{"text":"tick tick tick tick, yeah! z is twelve! hooray! great, I've written a parser that can now read 3D data. watch out minecraft","width":843},{"text":"OK, what about 10 11 x?","width":571},{"text":"what do you think the value of z is now?","width":407},{"text":"well it's claiming that z is zero,but we should try something here. suppose we initialize z to be something else like 42","width":701},{"text":"z is still forty-two. so what our scanf did is it started eating, started walking along that string, it got to a point where it said this not what I expected and it choked. it just gave up and stopped","width":996},{"text":"so what we should do to write robust code is see how many things scanf actually managed to bite out of the input","width":644},{"text":"so let's have a variable here called numread and we can now check to see how many things were actually read by scanf and then we can write code that says, hold on a moment, I died trying to parse this line","width":1167},{"text":"now you can see numread equals two","width":117}]