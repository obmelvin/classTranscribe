[{"text":"my love for you is 42","width":170},{"text":"so this means this is going to continue until we get that null byte","width":386},{"text":"alright that's enough hints","width":107},{"text":"let's fixed that code","width":185},{"text":"right so see if you and your neighbor can fix this code faster than your other neighbor that you're not talking to","width":724},{"text":"it's not copying the string, that's one of the bugs","width":3769},{"text":"copy the bytes so actually we didn't just want to copy src into dest ","width":331},{"text":"all this would do is whatever the value of src is whatever the value of src is i is just some memory location, we set that into dest","width":456},{"text":"but dest is just a local variable so that would actually do nothing, it would actually just change src into dest","width":419},{"text":"what we want to do is just use src as a pointer","width":226},{"text":"so we need to put a star in here","width":168},{"text":"there we go","width":38},{"text":"right so we should have read the value at src hey go back to memory and then use dest as a pointer","width":424},{"text":"we wanted to dereference it ","width":75},{"text":"we wanted to say okay now write that value into whatever dest is pointing to","width":269},{"text":"so we've done that, we've copied one byte and we increment both pointers","width":251},{"text":"and then we go back around the loop so we're going to keep writing bytes until we get to the null byte","width":335},{"text":"is my function finished?","width":141},{"text":"no, what's wrong with it?","width":284},{"text":"yes thank you, yes we forgot to copy the null byte","width":289},{"text":"so this function is broken it forgot to copy the null byte","width":266},{"text":"but it might work if you test it if you happen to test it with memory that was already zero","width":417},{"text":"and you think aha I finished my mp","width":162},{"text":"right, no your code is broken","width":178},{"text":"because is forgot to terminate the C string","width":172},{"text":"and then some future function would start reading this and it wouldn't come across a null byte because there would be garbage after it","width":453},{"text":"and it would start printing random characters","width":274},{"text":"until it eventually got to a null byte","width":183},{"text":"of course if it didn't get to a null byte maybe other bad things would happen","width":192},{"text":"anyways so let's fix this","width":123},{"text":"we needed one more line to say after the while loop ","width":157},{"text":"alright the src should be a null byte which I could write like this","width":926},{"text":"okay here's another example of a classic C error which is when you've got two pointers you're probably using the wrong one","width":629},{"text":"okay so make sure that we change the very last byte at the end to be a zero byte","width":372},{"text":"so we terminate it","width":113},{"text":"we could have also fixed this by using a do while loop instead of a while loop","width":506},{"text":"so we would have only done the check at the very end","width":137},{"text":"we would have copied at least one byte","width":128},{"text":"alright so that was my string copy","width":156},{"text":"how about something that actually duplicates strings","width":424},{"text":"right so we want something that takes a character to some memory and we are going to make a new memory object","width":642},{"text":"and we're going to copy the contents of the original into our new piece of memory","width":347},{"text":"right so how do I get some new memory? easy I remember what I said ten minutes ago and say malloc","width":610},{"text":"so I've got malloc I've got the right size I copy.. whoops wait a moment I've got two pointers am I using them in the wrong direction?","width":673},{"text":"if in doubt, yes I probably am right?","width":159},{"text":"how do we check? easy go back to the manpage alright","width":293},{"text":"man let's try strcpy and BSD kindly calls them s1 and s2","width":906},{"text":"okay copies a string from s2 into s1","width":155},{"text":"yes we managed to do it the wrong way round","width":163},{"text":"what we should have done is swap these around","width":664},{"text":"by the way is this text large enough to see at the back?","width":182},{"text":"can you give me a thumbs up if it is?","width":200},{"text":"alright so most of you","width":104},{"text":"alright I'm assuming the people who didn't are going to sit closer to forward in the future","width":260},{"text":"but seriously let me know if it's not","width":190},{"text":"okay right is our code finished? okay we run it and it doesn't work, it might crash","width":764},{"text":"here's one problem, what's the size of src? what will this give us?","width":461},{"text":"one, we've managed to allocate enough space for one byte","width":221},{"text":"and then we try to write into that one byte","width":295},{"text":"okay that's fine if our string is very short, just one byte long","width":366},{"text":"not so fine if our src strings were longer","width":207},{"text":"so we shouldn't have done this right?","width":175},{"text":"what we wanted to know was the number of characters at the src","width":301},{"text":"so how can we do that?","width":219},{"text":"call strlen of src","width":500},{"text":"so now we test it and it almost works but it still crashes","width":218},{"text":"here's the issue, strlen tells us about the number of characters excluding the null byte at the end","width":380},{"text":"look C is trying to help you give off by one errors","width":292},{"text":"what a polite language, if it's not my fault it's your fault","width":283},{"text":"alright look we only need to add one to that","width":198},{"text":"that's just evil huh? who came up with this","width":254},{"text":"alright so when you write a language don't do this","width":442},{"text":"make your strlen actually say how many characters, how many bytes it actually took","width":288},{"text":"okay so we've got now we're calling malloc and we copy from the src ","width":539},{"text":"so this should be p, this should be from the src into our memory and finally we return p","width":379},{"text":"is it okay to turn p because look p is an automatic variable","width":252},{"text":"it's a local variable","width":53},{"text":"is that a problem? no because we are not returning a pointer to p itself","width":299},{"text":"we are running the contents of p","width":123},{"text":"and p is just looking at this memory that we've malloc'd and that memory that we've malloc'd will exist until we free it ","width":473},{"text":"now malloc itself returns a void pointer and if we wished we could cast that changes type into a character pointer","width":562},{"text":"in practice you don't need to","width":411},{"text":"that if you have a void pointer it's okay, it's allowed to cast it implicitly to a different type","width":526}]