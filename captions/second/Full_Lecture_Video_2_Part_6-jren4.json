[{"text":"alright, doesn't sound too bad, right? but what would happen if we had too many zombies?","width":607},{"text":"eventually, the system says \"I'm not creating any more processes for nobody\"","width":294},{"text":"yes? I will kill another process so your fork(), for example, would fail or another processes fork() would fail.","width":960},{"text":"okay so, you can do that. the child will continue and the child will do what it wants to do. okay?","width":380},{"text":"um, so, uh, the system has one thing it will try to do to prevent zombies. which is that in this situation if the parent finishes, and the child is left running","width":982},{"text":"that child is re-parented","width":265},{"text":"given a new parent","width":51},{"text":"so if it called get ppid(), it doesn't crash, it doesn't explode, no it has a new parent.","width":521},{"text":"I'll tell you who the parent is","width":181},{"text":"process 1","width":253},{"text":"the ultimate of processes. the first process in your system. the first process that ever existed when you booted up: process 1","width":473},{"text":"well, kind of the first process","width":109},{"text":"the first process with a process number anyway","width":206},{"text":"the ultimate of processes","width":78},{"text":"right? which classically has been initially or just initiate or just init","width":614},{"text":"goes by various names","width":213},{"text":"and it calls wait","width":173},{"text":"on the poor little orphans","width":114},{"text":"alright, to ensure that we don't get zombies.","width":292},{"text":"so, life is not too bad if your parent dies right? the children as they finish, they will get reparented onto init. then init will make sure it calls waitpid on any future children that die","width":1190},{"text":"so, we run into problems, though, when we have a long-running parent.","width":494},{"text":"so let's say you made a webserver","width":468},{"text":"well the parent tries to live forever, wheeeeee, it's going to keep going around, hey! lets just run forever, right?","width":525},{"text":"and I'm going to serve the web request. and for each web request, I make a new child","width":604},{"text":"so if we have it so that the child does the work, each web request, each HTTP request we might run into a problem now","width":602},{"text":"because the parent is making all these children and never cleans up after them","width":463},{"text":"so in this scenario, when you've got a long-running parent, you've got to remember to call wait() or waitpid()","width":634},{"text":"because if you don't, you'll have a whole lot of zombies","width":220},{"text":"you'll have a whole load of exit values and other meta information about the process thats still just lying around inside this system","width":593},{"text":"okay, so, you must remember to call waitpid() to clear up or to prevent zombies","width":1215},{"text":"okay, alright, so, we won't talk about signals today. instead, let's see if I've got some notes","width":804},{"text":"okay! right!","width":440},{"text":"just a heads up, we'll shortly be publishing this","width":324},{"text":"so, your assignment for this week is two-fold","width":299},{"text":"first of all, time to jump into android","width":282},{"text":"get the SDK and the NDK installed and working on say, your laptops","width":325},{"text":"or start using the lab if you don't have a laptop","width":307},{"text":"we want you to basically make something simple and [something] to get as many people as board with actually using the NDK/SDK if possible","width":566},{"text":"secondly, you'll be using fork() and exec() and the stuff we've seen today to make your own simple \"make\" program which we've called \"fake\" instead of \"make\"","width":783},{"text":"so, let's have fun with learning to program fork() and exec() and enjoy your weekend! thank you very much! Questions come and see me now or find me in the coffee shop.","width":642},{"text":"questions come down and see me now or 5 minute coffee shop","width":128}]