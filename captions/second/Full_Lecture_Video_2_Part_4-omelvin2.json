[{"text":"alright, the only other thing I want to say about this. this is the second semester I've presented sleep sort. Before that CS241 didn't have a sorting algorithm","width":714.1818182468414},{"text":"and it kinda felt lonely because 125, 225, every other theory class you take has a sorting algorithm. now we can proudly say, yes, system programming has a sorting algorithm","width":734.1818182468414},{"text":"right, so, questions about this algorithm? other than never use it!","width":577.1818182468414},{"text":"right so clearly it's got some limitations. sleep's going to count for a second in seconds etc","width":490.18181824684143},{"text":"and also it relies on the operating system to implement sleep so it's not truly an order n algorithm. the operator is just delegating all the work to the operating system to make sure the processes sleep the right amount of time. in other wrods, when you call sleep your process gets stuck, it's not going to execute anymore instructions until the operating system wakes it up. we'll be talking about how it does that when we talk about scheduling later on in the course","width":1925.1818182468414},{"text":"let's go back to some more serious questions. what does the child inherit from the parent?","width":509.18181824684143},{"text":"all the money, right, no. ","width":217.18181824684143},{"text":"what've we got? what've we seen so far, what does it inherit when we call fork? what do you think it inherits? what do you get? i'm sorry?","width":832.1818182468414},{"text":"variables, yes! so you get a copy of the memory","width":300.18181824684143},{"text":"all of the processes memory you get a complete copy of that. ok, what else?","width":683.1818182468414},{"text":"that's kind of all in the memory, yes all of your c variables etc, the state of any kind of libraries like the rand. state of the random number generator. what else might you get?","width":929.1818182468414},{"text":"OK, I'll give you two. current directory and open files","width":1036.1818182468414},{"text":"if you've opened a file you'll fork will also be able to read and write into that file. more about that more later in terms of the details in terms of what happens when both the parent and child read and write into the same file","width":1062.1818182468414},{"text":"what's different between the child process and the parent process?","width":290.18181824684143},{"text":"here's a couple of differences. first of all, guess what, if you call getpid you get different numbers","width":815.1818182468414},{"text":"what else is different? the return value of fork ","width":1050.1818182468414},{"text":"if the result is greater than zero you know you have a child and therefore you must be the parent","width":1541.1818182468414},{"text":"oh yes","width":149.18181824684143},{"text":"there's something else that's different","width":538.1818182468414},{"text":"what do you think getppid does?","width":325.18181824684143},{"text":"yes! parents! hey I want to know the ID of my parent","width":355.18181824684143},{"text":"so of course that's going to be different","width":375.18181824684143},{"text":"you could probably write out a program to print the parent ID in two different ways. in the parent if fork returns a number it's easy, it's my ID. if i'm the child then I should be calling getppid to get the parent","width":1023.1818182468414},{"text":"so if I've got these two processes and I've shown you that we can write an if statement so they can do two different things, how can I make it so my parent waits for the child to finish?","width":927.1818182468414},{"text":"easy, we call wait or waitpid. let's have a look at this","width":530.1818182468414},{"text":"I will write a little program that immediately forks","width":516.1818182468414},{"text":"if result is greater than zero..what? I'm the parent","width":583.1818182468414},{"text":"OK, what should we do with the parent? let's wait for our child to do something","width":501.18181824684143},{"text":"so how do we finish? for this we'll look up waitpid","width":917.1818182468414},{"text":"we'll say who are you waiting for? I could pass in minus one to say 'hey I'm waiting for anybody', but actually I care about my child finishing","width":559.1818182468414},{"text":"then I can find out what happened to them, so I can basically do a post mortem on my child here and I can pass in some options but I don't need them for this lecture so I want to put zero","width":922.1818182468414},{"text":"let's have an integer and notice that I'm passing in the address of the integer","width":359.18181824684143},{"text":"if I do that waitpid can write it's notes into that integer because I've given the address of the integer","width":725.1818182468414},{"text":"now we could print something out about the child. percent d... waitpid said","width":1186.1818182468414},{"text":"ah, didn't save it","width":642.1818182468414},{"text":"our program get's result. what does our child do?","width":402.18181824684143},{"text":"our child does nothing. well actually it just gets to the end of the program, it finishes","width":432.18181824684143},{"text":"so the child says 'oh my result is actually zero so let me do what's down here. OK, nothing, I'll just finish, I'll just quit'","width":461.18181824684143},{"text":"we could write some special code for the child though. why don't we say sleep for a little bit like two seconds and then quit","width":935.1818182468414},{"text":"byeee","width":256.18181824684143}]