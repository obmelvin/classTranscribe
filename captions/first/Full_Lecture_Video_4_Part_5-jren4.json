[{"text":"/bin/ls hurray! finally we've got a basic shell that takes a single command","width":640},{"text":"we can't give it any arguments yet but we can execute it","width":192},{"text":"and woah hold on a moment, it stopped!","width":320},{"text":"what happened to my while loop?","width":128},{"text":"perhaps your neighbor knows why it didn't work?","width":576},{"text":"[silence]","width":2432},{"text":"okay we have another problem as well, in our assignment in running about that while loop, we've just written code which is actually kind of dangerous","width":704},{"text":"we made a assumption that the newline is always going to be there","width":192},{"text":"is that true?","width":256},{"text":"so it could appear to be true if we're testing it","width":384},{"text":"but it could be that someone is sending us data from a file and fgets simply returns because there is nothing left to read","width":640},{"text":"so a safer program might check to see what we're actually replacing","width":256},{"text":"so for example, it only make sense to do this if len is at least zero","width":320},{"text":"and the buffer[len - 1] is what we expect, a new line character","width":576},{"text":"okay so we've now got a safer program, it still works, but our while loop never happens, why?","width":1280},{"text":"yes thank you, our little process has had a mind wipe ","width":576},{"text":"its assembly language has disappeared, it's variables have disappeared","width":192},{"text":"basically everything we might have put inside the processes' memory is gone","width":384},{"text":"to be replaced by the code associated with our program ls","width":384},{"text":"so how do we make a shell? how do we make it so that it can execute more things","width":448},{"text":"fork exec, yes! so our plan is to do this","width":192},{"text":"in the child and in the parent we want to play our standard waitpid and then the exited stuff so that we can print out useful messages when our programs finish","width":1024},{"text":"and that is the basis of the mp","width":192},{"text":"alright so we're well on our way to having a working shell","width":704},{"text":"in real shells, you can execute things in the background, how do we do this?","width":512},{"text":"don't call waitpid, just in your shell go around again","width":704},{"text":"go back to your line that reads input, either fgets or readline ","width":320},{"text":"and let that child process carry on","width":192},{"text":"how do we make it so that we can read from a file?","width":448},{"text":"well we've got two possible ways to do that","width":320},{"text":"you could use say fopen or if you want to go low level, you could use open","width":384},{"text":"and then when you call fgets you can pass in the file descriptor you get from fopen and you would read from that file descriptor","width":1152},{"text":"there is another way as well, which is to close standard in so you would say hey close zero","width":512},{"text":"and then call open","width":64},{"text":"and pass in the right arguments to read from a file","width":384},{"text":"and we need to read the manpage of open to look at how we can open a file readonly for example","width":896},{"text":"and when we do that, future reads at the C level will be reading from this source file","width":448},{"text":"how about this? suppose I want to execute file.c inside a child","width":640},{"text":"but now I want to redirect the output of this command to a different file","width":384},{"text":"how would I do that?","width":256},{"text":"so how do, ah right, so I'm not going to try and change cat, this is just a command, I want my shell to do this part","width":896},{"text":"I want my shell so that the output goes to a different output","width":320},{"text":"okay and where would I do that?","width":384},{"text":"here's a suggestion: you could after the fork, inside the child code, the child could close one, use open and then call exec","width":1728},{"text":"we saw an example of this in a previous lecture where we made our program send the output of ls I believe to a log file","width":512},{"text":"so all we've really done is taken that idea and put it inside the code that we're writing for the child process","width":704},{"text":"and we've put it inside the child because our parent is going to go around that loop and execute other commands","width":448},{"text":"and we don't want everything to end up inside that log file, inside say output.txt, we only want the child to execute that code","width":576}]