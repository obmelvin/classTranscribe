[{"text":"let's prove this while one do nothing ","width":2336},{"text":"right so we got the very first line over here","width":285},{"text":"from printing to standard error but we did not get the standard out line","width":346},{"text":"so look at my code, I said \"hey this is using printf and this is using printf exclamation point\"","width":272},{"text":"the difference between the two is that one of them went to standard error","width":163},{"text":"and we saw that straight away","width":102},{"text":"standard out that text is still sitting inside my process","width":286},{"text":"inside the c library because we didn't include any new lines and now my process has got stuck inside this infinite loop","width":575},{"text":"so now when I control C the program never has a chance to flush that buffer","width":401},{"text":"it never has a chance to write it out","width":225},{"text":"if I did just exit normally, if I did just say return 0 here","width":729},{"text":"then as part of the exiting, the C library says oh look I've got some open file descriptors","width":484},{"text":"I will make sure that my buffers are flushed","width":184},{"text":"so it does that at the very end as the program is finishing","width":425},{"text":"right oh and one last thing here, if you actually want to print into a C string","width":259},{"text":"the best thing to use is sfprintf but I'm not going to talk about that today","width":267},{"text":"but that's assemble things into, yes quick question","width":439},{"text":"there is two different streams so it's up to the terminal at the end to combine it into one and display it","width":465},{"text":"but we could make it so that the standard error goes to a completely different file or goes somewhere else","width":320},{"text":"let's have a look at page two","width":414},{"text":"okay when you free a null pointer, nothing happens, it's a safe operation by definition of the spec","width":727},{"text":"being thinking beings, you want to see errors as soon as possible","width":233},{"text":"you can actually change it there's a call called setvbuff if you want to change it but that's the idea","width":421},{"text":"right okay so which one should we do here","width":539},{"text":"let's do these three, these are the funnest ones","width":341},{"text":"the first three questions on this you can see on the wiki book","width":419},{"text":"I want to kind of go through these, first of all let's write our most exciting system program today","width":603},{"text":"I'm going to use this fork and for that we need to include unitstd.h so let's do that","width":1257},{"text":"so let's print something out in our little program here, let's find out what our process id is","width":512},{"text":"so I'll just do %d for now, that's good enough for this lecture","width":303},{"text":"let's call getpid to mean get my process identifier so we'll run this","width":684},{"text":"and next time I run it I'll have a new line as well so when I run it this time my program was process identifier 61","width":577},{"text":"and in fact if you do ps on a command line you can see all these different process little numbers","width":308},{"text":"and we'll use that later because we'll control them","width":198},{"text":"this little virtual machine doesn't have much going on","width":226},{"text":"right but if I was to run it again, I'd probably get a different process number","width":525},{"text":"one hundred and seventy five, okay","width":100}]